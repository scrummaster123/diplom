services:
  rabbit:
    image: rabbitmq:3-management
    hostname: rabbitmqhost
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - myLocalNetwork
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: otus_system
      POSTGRES_PASSWORD: otus-123@!
      POSTGRES_DB: otus_course
    ports:
      - "5412:5432"
    networks:
      - myLocalNetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "otus_system", "-d", "otus_course"]
      interval: 10s
      timeout: 5s
      retries: 5

  afisha.web:
    image: ${DOCKER_REGISTRY-}afishaweb
    build:
      context: .
      dockerfile: src/Afisha.Web/Dockerfile
    networks:
      - myLocalNetwork
    depends_on:
      rabbit:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmqhost
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      ASPNETCORE_ENVIRONMENT: Docker
    ports:
      - "5182:8080"

  afisha.notificationservice:
    image: afisha.notificationservice
    build:
      context: .
      dockerfile: src/Afisha.NotificationService/Dockerfile
    networks:
      - myLocalNetwork
    depends_on:
      rabbit:
        condition: service_healthy
    environment:
      WORKING_SETTINGS: Docker

  afisha.react:
    image: afisha.react
    build:
      context: ./src/Afisha.React
      dockerfile: Dockerfile
    networks:
      - myLocalNetwork
    ports:
      - "8080:80"
    depends_on:
      - afisha.web
    environment:
      VITE_API_URL: http://afisha.web:8080 # Если фронтенд делает запросы к бэкенду

volumes:
  rabbitmq_data:
  es_data:

networks:
  myLocalNetwork:
    driver: bridge